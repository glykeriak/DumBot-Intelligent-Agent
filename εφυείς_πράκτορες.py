# -*- coding: utf-8 -*-
"""Εφυείς Πράκτορες.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g320nfZwmliN8uB8YPM6q0jj0T899mAa
"""

# Βιβλιοθήκη 1
!pip install openai langchain langchain-openai langchain-community ipywidgets

# Βιβλιοθήκη 2
!pip install gradio

# Εισαγωγές για OpenAI + LangChain
from langchain_openai import ChatOpenAI
from langchain.prompts import ChatPromptTemplate
from google.colab import drive
from dotenv import load_dotenv
from openai import OpenAI
from IPython.display import display

# Widgets & διεπαφή
import ipywidgets as widgets
import gradio as gr
import os

# Συνδέουμε το Google Drive για να πάρουμε το API key
# Το API key τοποθετείται σε .env αρχείο για λόγους ασφαλείας
drive.mount('/content/drive')
# Φορτώνουμε το αρχείο με το API key
load_dotenv('/content/drive/MyDrive/Colab Notebooks/api_key.env')

client = OpenAI(
    api_key=os.environ["OPENAI_API_KEY"],
    base_url="https://openrouter.ai/api/v1"
)

# Ο LLM agent που θα χρησιμοποιείται για συζήτηση
general_llm = ChatOpenAI(
    model="mistralai/mistral-7b-instruct",
    # Κρατάμε τη δημιουργικότητα χαμηλά για σταθερότητα στις απαντήσεις
    temperature=0.2,
    # Χρησιμοποιούμε το OpenRouter ως endpoint
    openai_api_base="https://openrouter.ai/api/v1"
)

# UI με gradio για την επιλογή λειτουργίας
task_choice = gr.Radio(
    ["Γενική Συζήτηση", "Συγγραφή Κώδικα", "Εκσφαλμάτωση Κώδικα", "Αξιολόγηση Κώδικα"],
    label="Επέλεξε"
)

# Agent για δημιουργία κώδικα
class CodeHelper:
    def __init__(self):
        self.chat = ChatOpenAI(
            model="mistralai/mistral-7b-instruct",
            temperature=0.2,
            openai_api_base="https://openrouter.ai/api/v1"
        )

    def create_function(self, description):
        prompt = ChatPromptTemplate.from_messages([
            ("system", "You are a senior developer. Write clean, correct, and efficient code based on the following description."),
            ("user", "Description:\n{description}")
        ])

        full_prompt = prompt.format_prompt(description=description)
        reply = self.chat.invoke(full_prompt.to_messages())
        return reply.content

# Agent για διόρθωση σφαλμάτων
class CodeDebugger:
    def __init__(self):
        self.chat = ChatOpenAI(
            model="mistralai/mistral-7b-instruct",
            temperature=0.2,
            openai_api_base="https://openrouter.ai/api/v1"
        )

    def fix_errors(self, code):
        prompt = ChatPromptTemplate.from_messages([
            ("system", "You are a debugging expert. Find and fix any errors or issues in the following code."),
            ("user", "Code:\n{code}")
        ])

        full_prompt = prompt.format_prompt(code=code)
        reply = self.chat.invoke(full_prompt.to_messages())
        return reply.content

# Agent για την αξιολόγηση του κώδικα
class CodeReviewer:
    def __init__(self):
        self.chat = ChatOpenAI(
            model="mistralai/mistral-7b-instruct",
            temperature=0.2,
            openai_api_base="https://openrouter.ai/api/v1"
        )

    def suggest_improvements(self, code):
        prompt = ChatPromptTemplate.from_messages([
            ("system", "You are an experienced code reviewer. Suggest improvements to enhance code quality, readability, and best practices."),
            ("user", "Code:\n{code}")
        ])

        full_prompt = prompt.format_prompt(code=code)
        reply = self.chat.invoke(full_prompt.to_messages())
        return reply.content

# Κεντρικός agent για τον συντονισμό των υπολοίπων
class CodingAssistant:
    def __init__(self):
        self.writer = CodeHelper()
        self.debugger = CodeDebugger()
        self.reviewer = CodeReviewer()

    def from_description(self, description):
        raw_code = self.writer.create_function(description)

        fixed_code = self.debugger.fix_errors(raw_code)

        feedback = self.reviewer.suggest_improvements(fixed_code)

        return raw_code, fixed_code, feedback

    def from_existing_code(self, code):
        fixed_code = self.debugger.fix_errors(code)
        feedback = self.reviewer.suggest_improvements(fixed_code)
        return fixed_code, feedback

assistant = CodingAssistant()

# Συνάρτηση που διαχειρίζεται την είσοδο του χρήστη και δίνει απαντήσεις
def handle_input(message, mode, history=[]):

    messages = [{"role": "system", "content": "You are a friendly and intelligent assistant who remembers the conversation with the user."}]

    for user_msg, bot_msg in history:
        messages.append({"role": "user", "content": user_msg})
        messages.append({"role": "assistant", "content": bot_msg})

    if mode == "Συγγραφή Κώδικα":
        code, _, _ = assistant.from_description(message)
        messages.append({"role": "user", "content": f"Περιγραφή:\n{message}"})
        messages.append({"role": "assistant", "content": code})
        return code

    elif mode == "Εκσφαλμάτωση Κώδικα":
        fixed_code, _ = assistant.from_existing_code(message)
        messages.append({"role": "user", "content": f"Διόρθωσε τον παρακάτω κώδικα:\n{message}"})
        messages.append({"role": "assistant", "content": fixed_code})
        return fixed_code

    elif mode == "Αξιολόγηση Κώδικα":
        _, feedback = assistant.from_existing_code(message)
        messages.append({"role": "user", "content": f"Αξιολόγησε τον παρακάτω κώδικα:\n{message}"})
        messages.append({"role": "assistant", "content": feedback})
        return feedback

    elif mode == "Γενική Συζήτηση":
        messages.append({"role": "user", "content": message})
        response = general_llm.invoke(messages)
        return response.content

# UI με gradio
with gr.Blocks() as app:
    gr.Markdown("## 🐘 DumBot το ελεφαντάκι")

    mode = gr.Radio(
        ["Γενική Συζήτηση", "Συγγραφή Κώδικα", "Εκσφαλμάτωση Κώδικα", "Αξιολόγηση Κώδικα"],
        label="Επέλεξε λειτουργία"
    )

    chatbox = gr.Chatbot()
    user_input = gr.Textbox(label="Γράψε εδώ:")

    send_button = gr.Button("Αποστολή")

    def reply(message, history, mode):
        response = handle_input(message, mode, history)
        history.append((message, response))
        return history, ""

    send_button.click(
        reply,
        inputs=[user_input, chatbox, mode],
        outputs=[chatbox, user_input]
    )

# Εκκίνηση της εφαρμογής
app.launch()